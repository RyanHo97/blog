第1章 预备知识
本章介绍汇编语言的一些基本概念，给出一些用汇编语言编程所需要的基本知识。

1.1 汇编语言的由来及其特点
1.1.1 机器语言
机器指令是CPU能直接识别并执行的指令，它的表现形式是二进制编码。机器指令通常由操作码和操作数两部分组成，操作码指出该指令所要完成的操作，即指令的功能，操作数指出参与运算的对象，以及运算结果所存放的位置等。

由于机器指令与CPU紧密相关，所以，不同种类的CPU所对应的机器指令也就不同，而且它们的指令系统往往相差很大。但对同一系列的CPU来说，为了满足各型号之间具有良好的兼容性，要做到：新一代CPU的指令系统必须包括先前同系列CPU的指令系统。只有这样，先前开发出来的各类程序在新一代CPU上才能正常运行。

机器语言是用来直接描述机器指令、使用机器指令的规则等。它是CPU能直接识别的唯一一种语言，也就是说，CPU能直接执行用机器语言描述的程序。

用机器语言编写程序是早期经过严格训练的专业技术人员的工作，普通的程序员一般难以胜任，而且用机器语言编写的程序不易读、出错率高、难以维护，也不能直观地反映用计算机解决问题的基本思路。

由于用机器语言编写程序有以上诸多的不便，现在几乎没有程序员这样编写程序了。

1.1.2 汇编语言
虽然用机器语言编写程序有很高的要求和许多不便，但编写出来的程序执行效率高，CPU严格按照程序员的要求去做，没有多余的额外操作。所以，在保留“程序执行效率高”的前提下，人们就开始着手研究一种能大大改善程序可读性的编程方法。

为了改善机器指令的可读性，选用了一些能反映机器指令功能的单词或词组来代表该机器指令，而不再关心机器指令的具体二进制编码。与此同时，也把CPU内部的各种资源符号化，使用该符号名也等于引用了该具体的物理资源。

如此一来，令人难懂的二进制机器指令就可以用通俗易懂的、具有一定含义的符号指令来表示了，于是，汇编语言就有了雏型。现在，我们称这些具有一定含义的符号为助忆符，用指令助忆符、符号地址等组成的符号指令称为汇编格式指令(或汇编指令)。

汇编语言是汇编指令集、伪指令集和使用它们规则的统称。伪指令是在程序设计时所需要的一些辅助性说明指令，它不对应具体的机器指令，有关内容在以后的各章节中会有详细叙述，在此不展开介绍。

用汇编语言编写的程序称为汇编语言程序，或汇编语言源程序，在本教材中或特定的环境下，也可简称为源程序。汇编语言程序要比用机器指令编写的程序容易理解和维护。

1.1.3 汇编程序
用汇编语言编写的程序大大提高了程序的可读性，但失去了CPU能直接识别的特性。例如用汇编语言书写的指令：MOV AX, BX，CPU不会知道这几个字符所表达出来的功能，但程序员一看就知道：要求CPU把寄存器BX的值传送给寄存器AX。

把机器指令符号化增加了程序的可读性，但引起了如何让CPU知道程序员的用意，并按照其要求完成相应操作的问题。解决该问题就需要一个翻译程序，它能把汇编语言编写的源程序翻译成CPU能识别的机器指令序列。这里，我们称该翻译程序为汇编程序。 

汇编程序能把左边汇编语言源程序翻译成右边的机器指令序列。其中，把汇编语言指令“MOV AX, BX”和“ADD AX, 5”分别转换成机器指令89D8H和050500H，而后者都是CPU能直接识别的，所以，可执行它们。

目前，常用的汇编程序有：MASM、TASM和DEBUG等。
